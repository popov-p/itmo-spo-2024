/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : Var4.g
 *     -                            On : 2024-09-22 18:38:15
 *     -                 for the lexer : Var4LexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
Var4Lexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pVar4Lexer, which is returned from a call to Var4LexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pVar4Lexer are  as follows:
 *
 *  - 
 void
      pVar4Lexer->TRUE(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->FALSE(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->DEF(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->BEGIN(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->END(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->OF(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->LPAREN(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->RPAREN(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->COMMA(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->ARRAY(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->LSQBRACK(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->RSQBRACK(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->IF(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->ELSE(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->THEN(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->WHILE(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->UNTIL(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->SEMICOLON(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->BREAK(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->LCURLBRACK(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->RCURLBRACK(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->RANGEDOTS(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->BYTE_T(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->INT_T(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->UINT_T(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->LONG_T(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->ULONG_T(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->CHAR_T(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->STRING_T(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->BOOL_T(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->ASSIGN(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->PLUS(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->MINUS(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->MUL(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->DIV(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->LOGICNOT(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->BYTENOT(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->IDENTIFIER(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->STRING(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->CHAR(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->HEX(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->BITS(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->DEC(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->WS(pVar4Lexer)
 *  - 
 void
      pVar4Lexer->Tokens(pVar4Lexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_Var4Lexer_H
#define _Var4Lexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct Var4Lexer_Ctx_struct Var4Lexer, * pVar4Lexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
Var4Lexer

 */
struct Var4Lexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mTRUE)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mFALSE)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mDEF)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mBEGIN)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mEND)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mOF)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mLPAREN)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mRPAREN)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mARRAY)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mLSQBRACK)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mRSQBRACK)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mIF)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mELSE)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mTHEN)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mWHILE)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mUNTIL)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mSEMICOLON)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mBREAK)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mLCURLBRACK)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mRCURLBRACK)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mRANGEDOTS)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mBYTE_T)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mINT_T)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mUINT_T)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mLONG_T)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mULONG_T)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mCHAR_T)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mSTRING_T)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mBOOL_T)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mASSIGN)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mMUL)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mDIV)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mLOGICNOT)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mBYTENOT)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mIDENTIFIER)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mCHAR)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mHEX)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mBITS)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mDEC)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct Var4Lexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct Var4Lexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct Var4Lexer_Ctx_struct * ctx);
    void	    (*free)   (struct Var4Lexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pVar4Lexer Var4LexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pVar4Lexer Var4LexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ARRAY      4
#define ASSIGN      5
#define BEGIN      6
#define BITS      7
#define BOOL_T      8
#define BREAK      9
#define BYTENOT      10
#define BYTE_T      11
#define CHAR      12
#define CHAR_T      13
#define COMMA      14
#define DEC      15
#define DEF      16
#define DIV      17
#define ELSE      18
#define END      19
#define FALSE      20
#define HEX      21
#define IDENTIFIER      22
#define IF      23
#define INT_T      24
#define LCURLBRACK      25
#define LOGICNOT      26
#define LONG_T      27
#define LPAREN      28
#define LSQBRACK      29
#define MINUS      30
#define MUL      31
#define OF      32
#define PLUS      33
#define RANGEDOTS      34
#define RCURLBRACK      35
#define RPAREN      36
#define RSQBRACK      37
#define SEMICOLON      38
#define STRING      39
#define STRING_T      40
#define THEN      41
#define TRUE      42
#define UINT_T      43
#define ULONG_T      44
#define UNTIL      45
#define WHILE      46
#define WS      47
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for Var4Lexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
