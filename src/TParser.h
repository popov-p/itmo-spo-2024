/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : T.g
 *     -                            On : 2024-09-13 12:44:48
 *     -                for the parser : TParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
TParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pTParser, which is returned from a call to TParserNew().
 *
 * The methods in pTParser are  as follows:
 *
 *  - 
 TParser_source_return
      pTParser->source(pTParser)
 *  - 
 TParser_typeRef_return
      pTParser->typeRef(pTParser)
 *  - 
 TParser_baseType_return
      pTParser->baseType(pTParser)
 *  - 
 TParser_arraySuffix_return
      pTParser->arraySuffix(pTParser)
 *  - 
 TParser_arrayContents_return
      pTParser->arrayContents(pTParser)
 *  - 
 TParser_arrayElement_return
      pTParser->arrayElement(pTParser)
 *  - 
 TParser_funcSignature_return
      pTParser->funcSignature(pTParser)
 *  - 
 TParser_argDefList_return
      pTParser->argDefList(pTParser)
 *  - 
 TParser_argDef_return
      pTParser->argDef(pTParser)
 *  - 
 TParser_sourceItem_return
      pTParser->sourceItem(pTParser)
 *  - 
 TParser_funcDef_return
      pTParser->funcDef(pTParser)
 *  - 
 TParser_statement_return
      pTParser->statement(pTParser)
 *  - 
 TParser_block_return
      pTParser->block(pTParser)
 *  - 
 TParser_expr_return
      pTParser->expr(pTParser)
 *  - 
 TParser_exprSuffix_return
      pTParser->exprSuffix(pTParser)
 *  - 
 TParser_unary_return
      pTParser->unary(pTParser)
 *  - 
 TParser_primary_return
      pTParser->primary(pTParser)
 *  - 
 TParser_primarySuffix_return
      pTParser->primarySuffix(pTParser)
 *  - 
 TParser_callSuffix_return
      pTParser->callSuffix(pTParser)
 *  - 
 TParser_indexerSuffix_return
      pTParser->indexerSuffix(pTParser)
 *  - 
 TParser_exprList_return
      pTParser->exprList(pTParser)
 *  - 
 TParser_binOp_return
      pTParser->binOp(pTParser)
 *  - 
 TParser_unOp_return
      pTParser->unOp(pTParser)
 *  - 
 TParser_place_return
      pTParser->place(pTParser)
 *  - 
 TParser_literal_return
      pTParser->literal(pTParser)
 *  - 
 TParser_braces_return
      pTParser->braces(pTParser)
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_TParser_H
#define _TParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct TParser_Ctx_struct TParser, * pTParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct TParser_source_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_source_return;



typedef struct TParser_typeRef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_typeRef_return;



typedef struct TParser_baseType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_baseType_return;



typedef struct TParser_arraySuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_arraySuffix_return;



typedef struct TParser_arrayContents_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_arrayContents_return;



typedef struct TParser_arrayElement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_arrayElement_return;



typedef struct TParser_funcSignature_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_funcSignature_return;



typedef struct TParser_argDefList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_argDefList_return;



typedef struct TParser_argDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_argDef_return;



typedef struct TParser_sourceItem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_sourceItem_return;



typedef struct TParser_funcDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_funcDef_return;



typedef struct TParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_statement_return;



typedef struct TParser_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_block_return;



typedef struct TParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_expr_return;



typedef struct TParser_exprSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_exprSuffix_return;



typedef struct TParser_unary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_unary_return;



typedef struct TParser_primary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_primary_return;



typedef struct TParser_primarySuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_primarySuffix_return;



typedef struct TParser_callSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_callSuffix_return;



typedef struct TParser_indexerSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_indexerSuffix_return;



typedef struct TParser_exprList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_exprList_return;



typedef struct TParser_binOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_binOp_return;



typedef struct TParser_unOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_unOp_return;



typedef struct TParser_place_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_place_return;



typedef struct TParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_literal_return;



typedef struct TParser_braces_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    TParser_braces_return;




/** Context tracking structure for 
TParser

 */
struct TParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     TParser_source_return
     (*source)	(struct TParser_Ctx_struct * ctx);

     TParser_typeRef_return
     (*typeRef)	(struct TParser_Ctx_struct * ctx);

     TParser_baseType_return
     (*baseType)	(struct TParser_Ctx_struct * ctx);

     TParser_arraySuffix_return
     (*arraySuffix)	(struct TParser_Ctx_struct * ctx);

     TParser_arrayContents_return
     (*arrayContents)	(struct TParser_Ctx_struct * ctx);

     TParser_arrayElement_return
     (*arrayElement)	(struct TParser_Ctx_struct * ctx);

     TParser_funcSignature_return
     (*funcSignature)	(struct TParser_Ctx_struct * ctx);

     TParser_argDefList_return
     (*argDefList)	(struct TParser_Ctx_struct * ctx);

     TParser_argDef_return
     (*argDef)	(struct TParser_Ctx_struct * ctx);

     TParser_sourceItem_return
     (*sourceItem)	(struct TParser_Ctx_struct * ctx);

     TParser_funcDef_return
     (*funcDef)	(struct TParser_Ctx_struct * ctx);

     TParser_statement_return
     (*statement)	(struct TParser_Ctx_struct * ctx);

     TParser_block_return
     (*block)	(struct TParser_Ctx_struct * ctx);

     TParser_expr_return
     (*expr)	(struct TParser_Ctx_struct * ctx);

     TParser_exprSuffix_return
     (*exprSuffix)	(struct TParser_Ctx_struct * ctx);

     TParser_unary_return
     (*unary)	(struct TParser_Ctx_struct * ctx);

     TParser_primary_return
     (*primary)	(struct TParser_Ctx_struct * ctx);

     TParser_primarySuffix_return
     (*primarySuffix)	(struct TParser_Ctx_struct * ctx);

     TParser_callSuffix_return
     (*callSuffix)	(struct TParser_Ctx_struct * ctx);

     TParser_indexerSuffix_return
     (*indexerSuffix)	(struct TParser_Ctx_struct * ctx);

     TParser_exprList_return
     (*exprList)	(struct TParser_Ctx_struct * ctx);

     TParser_binOp_return
     (*binOp)	(struct TParser_Ctx_struct * ctx);

     TParser_unOp_return
     (*unOp)	(struct TParser_Ctx_struct * ctx);

     TParser_place_return
     (*place)	(struct TParser_Ctx_struct * ctx);

     TParser_literal_return
     (*literal)	(struct TParser_Ctx_struct * ctx);

     TParser_braces_return
     (*braces)	(struct TParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred23_T)	(struct TParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct TParser_Ctx_struct * ctx);
    void	    (*free)   (struct TParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pTParser TParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pTParser TParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__10      10
#define T__11      11
#define T__12      12
#define T__13      13
#define T__14      14
#define T__15      15
#define T__16      16
#define T__17      17
#define T__18      18
#define T__19      19
#define T__20      20
#define T__21      21
#define T__22      22
#define T__23      23
#define T__24      24
#define T__25      25
#define T__26      26
#define T__27      27
#define T__28      28
#define T__29      29
#define T__30      30
#define T__31      31
#define T__32      32
#define T__33      33
#define T__34      34
#define T__35      35
#define T__36      36
#define T__37      37
#define T__38      38
#define T__39      39
#define T__40      40
#define BITS      4
#define BOOL      5
#define DEC      6
#define HEX      7
#define IDENTIFIER      8
#define STRING      9
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for TParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
