/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : Var4.g
 *     -                            On : 2024-09-22 18:38:15
 *     -                for the parser : Var4ParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
Var4Parser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pVar4Parser, which is returned from a call to Var4ParserNew().
 *
 * The methods in pVar4Parser are  as follows:
 *
 *  - 
 Var4Parser_source_return
      pVar4Parser->source(pVar4Parser)
 *  - 
 Var4Parser_sourceItem_return
      pVar4Parser->sourceItem(pVar4Parser)
 *  - 
 Var4Parser_funcDef_return
      pVar4Parser->funcDef(pVar4Parser)
 *  - 
 Var4Parser_funcSignature_return
      pVar4Parser->funcSignature(pVar4Parser)
 *  - 
 Var4Parser_arg_return
      pVar4Parser->arg(pVar4Parser)
 *  - 
 Var4Parser_list_arg_return
      pVar4Parser->list_arg(pVar4Parser)
 *  - 
 Var4Parser_typeRef_return
      pVar4Parser->typeRef(pVar4Parser)
 *  - 
 Var4Parser_builtin_return
      pVar4Parser->builtin(pVar4Parser)
 *  - 
 Var4Parser_custom_return
      pVar4Parser->custom(pVar4Parser)
 *  - 
 Var4Parser_arrayType_return
      pVar4Parser->arrayType(pVar4Parser)
 *  - 
 Var4Parser_statement_return
      pVar4Parser->statement(pVar4Parser)
 *  - 
 Var4Parser_ifStatement_return
      pVar4Parser->ifStatement(pVar4Parser)
 *  - 
 Var4Parser_loopStatement_return
      pVar4Parser->loopStatement(pVar4Parser)
 *  - 
 Var4Parser_repeatStatement_return
      pVar4Parser->repeatStatement(pVar4Parser)
 *  - 
 Var4Parser_repeatSuffix_return
      pVar4Parser->repeatSuffix(pVar4Parser)
 *  - 
 Var4Parser_baseStatement_return
      pVar4Parser->baseStatement(pVar4Parser)
 *  - 
 Var4Parser_breakStatement_return
      pVar4Parser->breakStatement(pVar4Parser)
 *  - 
 Var4Parser_expressionStatement_return
      pVar4Parser->expressionStatement(pVar4Parser)
 *  - 
 Var4Parser_blockStatement_return
      pVar4Parser->blockStatement(pVar4Parser)
 *  - 
 Var4Parser_assignmentStatement_return
      pVar4Parser->assignmentStatement(pVar4Parser)
 *  - 
 Var4Parser_expr_return
      pVar4Parser->expr(pVar4Parser)
 *  - 
 Var4Parser_primaryExpr_return
      pVar4Parser->primaryExpr(pVar4Parser)
 *  - 
 Var4Parser_binaryOpSuffix_return
      pVar4Parser->binaryOpSuffix(pVar4Parser)
 *  - 
 Var4Parser_callSuffix_return
      pVar4Parser->callSuffix(pVar4Parser)
 *  - 
 Var4Parser_sliceSuffix_return
      pVar4Parser->sliceSuffix(pVar4Parser)
 *  - 
 Var4Parser_unaryExpr_return
      pVar4Parser->unaryExpr(pVar4Parser)
 *  - 
 Var4Parser_bracesExpr_return
      pVar4Parser->bracesExpr(pVar4Parser)
 *  - 
 Var4Parser_placeExpr_return
      pVar4Parser->placeExpr(pVar4Parser)
 *  - 
 Var4Parser_bool_return
      pVar4Parser->bool(pVar4Parser)
 *  - 
 Var4Parser_literalExpr_return
      pVar4Parser->literalExpr(pVar4Parser)
 *  - 
 Var4Parser_ranges_return
      pVar4Parser->ranges(pVar4Parser)
 *  - 
 Var4Parser_list_expr_return
      pVar4Parser->list_expr(pVar4Parser)
 *  - 
 Var4Parser_list_range_return
      pVar4Parser->list_range(pVar4Parser)
 *  - 
 Var4Parser_binOp_return
      pVar4Parser->binOp(pVar4Parser)
 *  - 
 Var4Parser_unOp_return
      pVar4Parser->unOp(pVar4Parser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_Var4Parser_H
#define _Var4Parser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct Var4Parser_Ctx_struct Var4Parser, * pVar4Parser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct Var4Parser_source_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_source_return;



typedef struct Var4Parser_sourceItem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_sourceItem_return;



typedef struct Var4Parser_funcDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_funcDef_return;



typedef struct Var4Parser_funcSignature_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_funcSignature_return;



typedef struct Var4Parser_arg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_arg_return;



typedef struct Var4Parser_list_arg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_list_arg_return;



typedef struct Var4Parser_typeRef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_typeRef_return;



typedef struct Var4Parser_builtin_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_builtin_return;



typedef struct Var4Parser_custom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_custom_return;



typedef struct Var4Parser_arrayType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_arrayType_return;



typedef struct Var4Parser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_statement_return;



typedef struct Var4Parser_ifStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_ifStatement_return;



typedef struct Var4Parser_loopStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_loopStatement_return;



typedef struct Var4Parser_repeatStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_repeatStatement_return;



typedef struct Var4Parser_repeatSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_repeatSuffix_return;



typedef struct Var4Parser_baseStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_baseStatement_return;



typedef struct Var4Parser_breakStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_breakStatement_return;



typedef struct Var4Parser_expressionStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_expressionStatement_return;



typedef struct Var4Parser_blockStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_blockStatement_return;



typedef struct Var4Parser_assignmentStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_assignmentStatement_return;



typedef struct Var4Parser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_expr_return;



typedef struct Var4Parser_primaryExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_primaryExpr_return;



typedef struct Var4Parser_binaryOpSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_binaryOpSuffix_return;



typedef struct Var4Parser_callSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_callSuffix_return;



typedef struct Var4Parser_sliceSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_sliceSuffix_return;



typedef struct Var4Parser_unaryExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_unaryExpr_return;



typedef struct Var4Parser_bracesExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_bracesExpr_return;



typedef struct Var4Parser_placeExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_placeExpr_return;



typedef struct Var4Parser_bool_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_bool_return;



typedef struct Var4Parser_literalExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_literalExpr_return;



typedef struct Var4Parser_ranges_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_ranges_return;



typedef struct Var4Parser_list_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_list_expr_return;



typedef struct Var4Parser_list_range_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_list_range_return;



typedef struct Var4Parser_binOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_binOp_return;



typedef struct Var4Parser_unOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4Parser_unOp_return;




/** Context tracking structure for 
Var4Parser

 */
struct Var4Parser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     Var4Parser_source_return
     (*source)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_sourceItem_return
     (*sourceItem)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_funcDef_return
     (*funcDef)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_funcSignature_return
     (*funcSignature)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_arg_return
     (*arg)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_list_arg_return
     (*list_arg)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_typeRef_return
     (*typeRef)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_builtin_return
     (*builtin)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_custom_return
     (*custom)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_arrayType_return
     (*arrayType)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_statement_return
     (*statement)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_ifStatement_return
     (*ifStatement)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_loopStatement_return
     (*loopStatement)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_repeatStatement_return
     (*repeatStatement)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_repeatSuffix_return
     (*repeatSuffix)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_baseStatement_return
     (*baseStatement)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_breakStatement_return
     (*breakStatement)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_expressionStatement_return
     (*expressionStatement)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_blockStatement_return
     (*blockStatement)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_assignmentStatement_return
     (*assignmentStatement)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_expr_return
     (*expr)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_primaryExpr_return
     (*primaryExpr)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_binaryOpSuffix_return
     (*binaryOpSuffix)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_callSuffix_return
     (*callSuffix)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_sliceSuffix_return
     (*sliceSuffix)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_unaryExpr_return
     (*unaryExpr)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_bracesExpr_return
     (*bracesExpr)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_placeExpr_return
     (*placeExpr)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_bool_return
     (*bool)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_literalExpr_return
     (*literalExpr)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_ranges_return
     (*ranges)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_list_expr_return
     (*list_expr)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_list_range_return
     (*list_range)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_binOp_return
     (*binOp)	(struct Var4Parser_Ctx_struct * ctx);

     Var4Parser_unOp_return
     (*unOp)	(struct Var4Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred7_Var4)	(struct Var4Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred8_Var4)	(struct Var4Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred20_Var4)	(struct Var4Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred21_Var4)	(struct Var4Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred22_Var4)	(struct Var4Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred23_Var4)	(struct Var4Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred24_Var4)	(struct Var4Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred34_Var4)	(struct Var4Parser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred35_Var4)	(struct Var4Parser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct Var4Parser_Ctx_struct * ctx);
    void	    (*free)   (struct Var4Parser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pVar4Parser Var4ParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pVar4Parser Var4ParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ARRAY      4
#define ASSIGN      5
#define BEGIN      6
#define BITS      7
#define BOOL_T      8
#define BREAK      9
#define BYTENOT      10
#define BYTE_T      11
#define CHAR      12
#define CHAR_T      13
#define COMMA      14
#define DEC      15
#define DEF      16
#define DIV      17
#define ELSE      18
#define END      19
#define FALSE      20
#define HEX      21
#define IDENTIFIER      22
#define IF      23
#define INT_T      24
#define LCURLBRACK      25
#define LOGICNOT      26
#define LONG_T      27
#define LPAREN      28
#define LSQBRACK      29
#define MINUS      30
#define MUL      31
#define OF      32
#define PLUS      33
#define RANGEDOTS      34
#define RCURLBRACK      35
#define RPAREN      36
#define RSQBRACK      37
#define SEMICOLON      38
#define STRING      39
#define STRING_T      40
#define THEN      41
#define TRUE      42
#define UINT_T      43
#define ULONG_T      44
#define UNTIL      45
#define WHILE      46
#define WS      47
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for Var4Parser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
