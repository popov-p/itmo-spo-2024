/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : src/grammar/V4.g
 *     -                            On : 2024-12-26 10:16:00
 *     -                 for the lexer : V4LexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
V4Lexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pV4Lexer, which is returned from a call to V4LexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pV4Lexer are  as follows:
 *
 *  - 
 void
      pV4Lexer->T__48(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__49(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__50(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__51(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__52(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__53(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__54(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__55(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__56(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__57(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__58(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__59(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__60(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__61(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__62(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__63(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__64(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__65(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__66(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__67(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__68(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__69(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__70(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__71(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__72(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__73(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__74(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__75(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__76(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__77(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__78(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__79(pV4Lexer)
 *  - 
 void
      pV4Lexer->T__80(pV4Lexer)
 *  - 
 void
      pV4Lexer->TRUE(pV4Lexer)
 *  - 
 void
      pV4Lexer->FALSE(pV4Lexer)
 *  - 
 void
      pV4Lexer->BYTE_T(pV4Lexer)
 *  - 
 void
      pV4Lexer->INT_T(pV4Lexer)
 *  - 
 void
      pV4Lexer->UINT_T(pV4Lexer)
 *  - 
 void
      pV4Lexer->LONG_T(pV4Lexer)
 *  - 
 void
      pV4Lexer->ULONG_T(pV4Lexer)
 *  - 
 void
      pV4Lexer->CHAR_T(pV4Lexer)
 *  - 
 void
      pV4Lexer->STRING_T(pV4Lexer)
 *  - 
 void
      pV4Lexer->BOOL_T(pV4Lexer)
 *  - 
 void
      pV4Lexer->IDENTIFIER(pV4Lexer)
 *  - 
 void
      pV4Lexer->STRING(pV4Lexer)
 *  - 
 void
      pV4Lexer->CHAR(pV4Lexer)
 *  - 
 void
      pV4Lexer->HEX(pV4Lexer)
 *  - 
 void
      pV4Lexer->BITS(pV4Lexer)
 *  - 
 void
      pV4Lexer->DEC(pV4Lexer)
 *  - 
 void
      pV4Lexer->WS(pV4Lexer)
 *  - 
 void
      pV4Lexer->Tokens(pV4Lexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_V4Lexer_H
#define _V4Lexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct V4Lexer_Ctx_struct V4Lexer, * pV4Lexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
V4Lexer

 */
struct V4Lexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__48)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__49)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__50)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__51)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__52)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__53)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__54)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__55)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__56)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__57)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__58)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__59)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__60)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__61)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__62)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__63)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__64)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__65)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__66)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__67)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__68)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__69)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__70)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__71)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__72)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__73)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__74)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__75)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__76)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__77)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__78)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__79)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mT__80)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mTRUE)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mFALSE)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mBYTE_T)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mINT_T)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mUINT_T)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mLONG_T)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mULONG_T)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mCHAR_T)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mSTRING_T)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mBOOL_T)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mIDENTIFIER)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mCHAR)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mHEX)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mBITS)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mDEC)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct V4Lexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct V4Lexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct V4Lexer_Ctx_struct * ctx);
    void	    (*free)   (struct V4Lexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pV4Lexer V4LexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pV4Lexer V4LexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__48      48
#define T__49      49
#define T__50      50
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__59      59
#define T__60      60
#define T__61      61
#define T__62      62
#define T__63      63
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define ARG      4
#define ARR_TYPE      5
#define BIN_OP      6
#define BITS      7
#define BLOCK      8
#define BOOL_T      9
#define BRACES      10
#define BREAK      11
#define BYTE_T      12
#define CALL      13
#define CHAR      14
#define CHAR_T      15
#define DEC      16
#define DIM      17
#define ELSE      18
#define EXPR      19
#define FALSE      20
#define FUNC_DEF      21
#define FUNC_SIG      22
#define HEX      23
#define IDENTIFIER      24
#define IF      25
#define INT_T      26
#define LIST_ARG      27
#define LIST_EXPR      28
#define LIST_RANGE      29
#define LONG_T      30
#define LOOP      31
#define PLACE_EXPR      32
#define RANGES      33
#define REPEAT      34
#define RETURN      35
#define SLICE      36
#define SOURCE      37
#define SOURCE_ITEM      38
#define STRING      39
#define STRING_T      40
#define TRUE      41
#define UINT_T      42
#define ULONG_T      43
#define UNARY_OP      44
#define VAR_DEC      45
#define VAR_DEF      46
#define WS      47
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for V4Lexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
