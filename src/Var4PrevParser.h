/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : ../src/Var4Prev.g
 *     -                            On : 2024-09-23 21:48:02
 *     -                for the parser : Var4PrevParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
Var4PrevParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pVar4PrevParser, which is returned from a call to Var4PrevParserNew().
 *
 * The methods in pVar4PrevParser are  as follows:
 *
 *  - 
 Var4PrevParser_source_return
      pVar4PrevParser->source(pVar4PrevParser)
 *  - 
 Var4PrevParser_sourceItem_return
      pVar4PrevParser->sourceItem(pVar4PrevParser)
 *  - 
 Var4PrevParser_funcDef_return
      pVar4PrevParser->funcDef(pVar4PrevParser)
 *  - 
 Var4PrevParser_funcSignature_return
      pVar4PrevParser->funcSignature(pVar4PrevParser)
 *  - 
 Var4PrevParser_arg_return
      pVar4PrevParser->arg(pVar4PrevParser)
 *  - 
 Var4PrevParser_list_arg_return
      pVar4PrevParser->list_arg(pVar4PrevParser)
 *  - 
 Var4PrevParser_typeRef_return
      pVar4PrevParser->typeRef(pVar4PrevParser)
 *  - 
 Var4PrevParser_builtin_return
      pVar4PrevParser->builtin(pVar4PrevParser)
 *  - 
 Var4PrevParser_custom_return
      pVar4PrevParser->custom(pVar4PrevParser)
 *  - 
 Var4PrevParser_arrayType_return
      pVar4PrevParser->arrayType(pVar4PrevParser)
 *  - 
 Var4PrevParser_statement_return
      pVar4PrevParser->statement(pVar4PrevParser)
 *  - 
 Var4PrevParser_ifStatement_return
      pVar4PrevParser->ifStatement(pVar4PrevParser)
 *  - 
 Var4PrevParser_loopStatement_return
      pVar4PrevParser->loopStatement(pVar4PrevParser)
 *  - 
 Var4PrevParser_repeatStatement_return
      pVar4PrevParser->repeatStatement(pVar4PrevParser)
 *  - 
 Var4PrevParser_repeatSuffix_return
      pVar4PrevParser->repeatSuffix(pVar4PrevParser)
 *  - 
 Var4PrevParser_baseStatement_return
      pVar4PrevParser->baseStatement(pVar4PrevParser)
 *  - 
 Var4PrevParser_breakStatement_return
      pVar4PrevParser->breakStatement(pVar4PrevParser)
 *  - 
 Var4PrevParser_expressionStatement_return
      pVar4PrevParser->expressionStatement(pVar4PrevParser)
 *  - 
 Var4PrevParser_blockStatement_return
      pVar4PrevParser->blockStatement(pVar4PrevParser)
 *  - 
 Var4PrevParser_assignmentStatement_return
      pVar4PrevParser->assignmentStatement(pVar4PrevParser)
 *  - 
 Var4PrevParser_returnStatement_return
      pVar4PrevParser->returnStatement(pVar4PrevParser)
 *  - 
 Var4PrevParser_expr_return
      pVar4PrevParser->expr(pVar4PrevParser)
 *  - 
 Var4PrevParser_primaryExpr_return
      pVar4PrevParser->primaryExpr(pVar4PrevParser)
 *  - 
 Var4PrevParser_binaryOpSuffix_return
      pVar4PrevParser->binaryOpSuffix(pVar4PrevParser)
 *  - 
 Var4PrevParser_callSuffix_return
      pVar4PrevParser->callSuffix(pVar4PrevParser)
 *  - 
 Var4PrevParser_sliceSuffix_return
      pVar4PrevParser->sliceSuffix(pVar4PrevParser)
 *  - 
 Var4PrevParser_unaryExpr_return
      pVar4PrevParser->unaryExpr(pVar4PrevParser)
 *  - 
 Var4PrevParser_bracesExpr_return
      pVar4PrevParser->bracesExpr(pVar4PrevParser)
 *  - 
 Var4PrevParser_placeExpr_return
      pVar4PrevParser->placeExpr(pVar4PrevParser)
 *  - 
 Var4PrevParser_bool_return
      pVar4PrevParser->bool(pVar4PrevParser)
 *  - 
 Var4PrevParser_literalExpr_return
      pVar4PrevParser->literalExpr(pVar4PrevParser)
 *  - 
 Var4PrevParser_ranges_return
      pVar4PrevParser->ranges(pVar4PrevParser)
 *  - 
 Var4PrevParser_list_expr_return
      pVar4PrevParser->list_expr(pVar4PrevParser)
 *  - 
 Var4PrevParser_list_range_return
      pVar4PrevParser->list_range(pVar4PrevParser)
 *  - 
 Var4PrevParser_binOp_return
      pVar4PrevParser->binOp(pVar4PrevParser)
 *  - 
 Var4PrevParser_unOp_return
      pVar4PrevParser->unOp(pVar4PrevParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_Var4PrevParser_H
#define _Var4PrevParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct Var4PrevParser_Ctx_struct Var4PrevParser, * pVar4PrevParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct Var4PrevParser_source_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_source_return;



typedef struct Var4PrevParser_sourceItem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_sourceItem_return;



typedef struct Var4PrevParser_funcDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_funcDef_return;



typedef struct Var4PrevParser_funcSignature_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_funcSignature_return;



typedef struct Var4PrevParser_arg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_arg_return;



typedef struct Var4PrevParser_list_arg_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_list_arg_return;



typedef struct Var4PrevParser_typeRef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_typeRef_return;



typedef struct Var4PrevParser_builtin_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_builtin_return;



typedef struct Var4PrevParser_custom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_custom_return;



typedef struct Var4PrevParser_arrayType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_arrayType_return;



typedef struct Var4PrevParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_statement_return;



typedef struct Var4PrevParser_ifStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_ifStatement_return;



typedef struct Var4PrevParser_loopStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_loopStatement_return;



typedef struct Var4PrevParser_repeatStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_repeatStatement_return;



typedef struct Var4PrevParser_repeatSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_repeatSuffix_return;



typedef struct Var4PrevParser_baseStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_baseStatement_return;



typedef struct Var4PrevParser_breakStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_breakStatement_return;



typedef struct Var4PrevParser_expressionStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_expressionStatement_return;



typedef struct Var4PrevParser_blockStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_blockStatement_return;



typedef struct Var4PrevParser_assignmentStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_assignmentStatement_return;



typedef struct Var4PrevParser_returnStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_returnStatement_return;



typedef struct Var4PrevParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_expr_return;



typedef struct Var4PrevParser_primaryExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_primaryExpr_return;



typedef struct Var4PrevParser_binaryOpSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_binaryOpSuffix_return;



typedef struct Var4PrevParser_callSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_callSuffix_return;



typedef struct Var4PrevParser_sliceSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_sliceSuffix_return;



typedef struct Var4PrevParser_unaryExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_unaryExpr_return;



typedef struct Var4PrevParser_bracesExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_bracesExpr_return;



typedef struct Var4PrevParser_placeExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_placeExpr_return;



typedef struct Var4PrevParser_bool_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_bool_return;



typedef struct Var4PrevParser_literalExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_literalExpr_return;



typedef struct Var4PrevParser_ranges_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_ranges_return;



typedef struct Var4PrevParser_list_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_list_expr_return;



typedef struct Var4PrevParser_list_range_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_list_range_return;



typedef struct Var4PrevParser_binOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_binOp_return;



typedef struct Var4PrevParser_unOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    Var4PrevParser_unOp_return;




/** Context tracking structure for 
Var4PrevParser

 */
struct Var4PrevParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     Var4PrevParser_source_return
     (*source)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_sourceItem_return
     (*sourceItem)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_funcDef_return
     (*funcDef)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_funcSignature_return
     (*funcSignature)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_arg_return
     (*arg)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_list_arg_return
     (*list_arg)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_typeRef_return
     (*typeRef)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_builtin_return
     (*builtin)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_custom_return
     (*custom)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_arrayType_return
     (*arrayType)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_statement_return
     (*statement)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_ifStatement_return
     (*ifStatement)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_loopStatement_return
     (*loopStatement)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_repeatStatement_return
     (*repeatStatement)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_repeatSuffix_return
     (*repeatSuffix)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_baseStatement_return
     (*baseStatement)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_breakStatement_return
     (*breakStatement)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_expressionStatement_return
     (*expressionStatement)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_blockStatement_return
     (*blockStatement)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_assignmentStatement_return
     (*assignmentStatement)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_returnStatement_return
     (*returnStatement)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_expr_return
     (*expr)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_primaryExpr_return
     (*primaryExpr)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_binaryOpSuffix_return
     (*binaryOpSuffix)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_callSuffix_return
     (*callSuffix)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_sliceSuffix_return
     (*sliceSuffix)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_unaryExpr_return
     (*unaryExpr)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_bracesExpr_return
     (*bracesExpr)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_placeExpr_return
     (*placeExpr)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_bool_return
     (*bool)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_literalExpr_return
     (*literalExpr)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_ranges_return
     (*ranges)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_list_expr_return
     (*list_expr)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_list_range_return
     (*list_range)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_binOp_return
     (*binOp)	(struct Var4PrevParser_Ctx_struct * ctx);

     Var4PrevParser_unOp_return
     (*unOp)	(struct Var4PrevParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred7_Var4Prev)	(struct Var4PrevParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred8_Var4Prev)	(struct Var4PrevParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred20_Var4Prev)	(struct Var4PrevParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred21_Var4Prev)	(struct Var4PrevParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred23_Var4Prev)	(struct Var4PrevParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred24_Var4Prev)	(struct Var4PrevParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred25_Var4Prev)	(struct Var4PrevParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred35_Var4Prev)	(struct Var4PrevParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred36_Var4Prev)	(struct Var4PrevParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct Var4PrevParser_Ctx_struct * ctx);
    void	    (*free)   (struct Var4PrevParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pVar4PrevParser Var4PrevParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pVar4PrevParser Var4PrevParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ARG      4
#define ARRAY      5
#define ASSIGN      6
#define ASSIGNMENT_STATEMENT      7
#define BEGIN      8
#define BIN_OP      9
#define BITS      10
#define BOOL_T      11
#define BREAK      12
#define BYTENOT      13
#define BYTE_T      14
#define CHAR      15
#define CHAR_T      16
#define COMMA      17
#define DEC      18
#define DEF      19
#define DIV      20
#define ELSE      21
#define END      22
#define EQUAL      23
#define FALSE      24
#define FUNC_DEF      25
#define FUNC_SIGNATURE      26
#define GEQ      27
#define GREATER      28
#define HEX      29
#define IDENTIFIER      30
#define IF      31
#define IF_STATEMENT      32
#define INT_T      33
#define LCURLBRACK      34
#define LEQ      35
#define LESS      36
#define LIST_ARG      37
#define LITERAL      38
#define LOGICNOT      39
#define LONG_T      40
#define LPAREN      41
#define LSQBRACK      42
#define MINUS      43
#define MUL      44
#define OF      45
#define PLACE_EXPR      46
#define PLUS      47
#define RANGEDOTS      48
#define RCURLBRACK      49
#define RETURN      50
#define RETURN_STATEMENT      51
#define RPAREN      52
#define RSQBRACK      53
#define SEMICOLON      54
#define SOURCE      55
#define SOURCE_ITEM      56
#define STRING      57
#define STRING_T      58
#define THEN      59
#define TRUE      60
#define UINT_T      61
#define ULONG_T      62
#define UNTIL      63
#define WHILE      64
#define WS      65
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for Var4PrevParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
