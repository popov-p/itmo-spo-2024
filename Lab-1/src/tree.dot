digraph {

	ordering=out;
	ranksep=.4;
	bgcolor="lightgrey";  node [shape=box, fixedsize=false, fontsize=12, fontname="Helvetica-bold", fontcolor="blue"
	width=.25, height=.25, color="black", fillcolor="white", style="filled, solid, bold"];

	edge [arrowsize=.5, color="black", style="bold"]

	n0x741cb6d39548[label="SOURCE"]
	n0x741cb6d39410[label="SOURCE_ITEM"]
	n0x741cb6d38cc0[label="FUNC_DEF"]
	n0x741cb6d32db0[label="FUNC_SIG"]
	n0x741cb6d32b40[label="calculateSum"]
	n0x741cb6d32c78[label="LIST_ARG"]
	n0x741cb6d32660[label="ARG"]
	n0x741cb6d32180[label="a"]
	n0x741cb6d32528[label="ARR_TYPE"]
	n0x741cb6d323f0[label="int"]
	n0x741cb6d322b8[label="5"]
	n0x741cb6d328d0[label="ARG"]
	n0x741cb6d32798[label="beta"]
	n0x741cb6d32a08[label="boolean"]
	n0x741cb6d32ee8[label="int"]
	n0x741cb6d37328[label="REPEAT"]
	n0x741cb6d36218[label="BLOCK"]
	n0x741cb6d35fa8[label="ASSIGN"]
	n0x741cb6d35d38[label="x"]
	n0x741cb6d360e0[label="2"]
	n0x741cb6d36e48[label="EXPR"]
	n0x741cb6d36f80[label="BRACES"]
	n0x741cb6d370b8[label="<"]
	n0x741cb6d371f0[label="z"]
	n0x741cb6d37460[label="2"]
	n0x741cb6d392d8[label="LOOP"]
	n0x741cb6d381c8[label="BRACES"]
	n0x741cb6d38300[label="<"]
	n0x741cb6d38438[label="z"]
	n0x741cb6d386a8[label="phi"]
	n0x741cb6d39068[label="ASSIGN"]
	n0x741cb6d38df8[label="ssd"]
	n0x741cb6d391a0[label="hdd"]

		n0x741cb6d39548 -> n0x741cb6d39410		// SOURCE -> SOURCE_ITEM
		n0x741cb6d39410 -> n0x741cb6d38cc0		// SOURCE_ITEM -> FUNC_DEF
		n0x741cb6d38cc0 -> n0x741cb6d32db0		// FUNC_DEF -> FUNC_SIG
		n0x741cb6d32db0 -> n0x741cb6d32b40		// FUNC_SIG -> calculateSum
		n0x741cb6d32db0 -> n0x741cb6d32c78		// FUNC_SIG -> LIST_ARG
		n0x741cb6d32c78 -> n0x741cb6d32660		// LIST_ARG -> ARG
		n0x741cb6d32660 -> n0x741cb6d32180		// ARG -> a
		n0x741cb6d32660 -> n0x741cb6d32528		// ARG -> ARR_TYPE
		n0x741cb6d32528 -> n0x741cb6d323f0		// ARR_TYPE -> int
		n0x741cb6d32528 -> n0x741cb6d322b8		// ARR_TYPE -> 5
		n0x741cb6d32c78 -> n0x741cb6d328d0		// LIST_ARG -> ARG
		n0x741cb6d328d0 -> n0x741cb6d32798		// ARG -> beta
		n0x741cb6d328d0 -> n0x741cb6d32a08		// ARG -> boolean
		n0x741cb6d32db0 -> n0x741cb6d32ee8		// FUNC_SIG -> int
		n0x741cb6d38cc0 -> n0x741cb6d37328		// FUNC_DEF -> REPEAT
		n0x741cb6d37328 -> n0x741cb6d36218		// REPEAT -> BLOCK
		n0x741cb6d36218 -> n0x741cb6d35fa8		// BLOCK -> ASSIGN
		n0x741cb6d35fa8 -> n0x741cb6d35d38		// ASSIGN -> x
		n0x741cb6d35fa8 -> n0x741cb6d360e0		// ASSIGN -> 2
		n0x741cb6d37328 -> n0x741cb6d36e48		// REPEAT -> EXPR
		n0x741cb6d36e48 -> n0x741cb6d36f80		// EXPR -> BRACES
		n0x741cb6d36f80 -> n0x741cb6d370b8		// BRACES -> <
		n0x741cb6d370b8 -> n0x741cb6d371f0		// < -> z
		n0x741cb6d370b8 -> n0x741cb6d37460		// < -> 2
		n0x741cb6d38cc0 -> n0x741cb6d392d8		// FUNC_DEF -> LOOP
		n0x741cb6d392d8 -> n0x741cb6d381c8		// LOOP -> BRACES
		n0x741cb6d381c8 -> n0x741cb6d38300		// BRACES -> <
		n0x741cb6d38300 -> n0x741cb6d38438		// < -> z
		n0x741cb6d38300 -> n0x741cb6d386a8		// < -> phi
		n0x741cb6d392d8 -> n0x741cb6d39068		// LOOP -> ASSIGN
		n0x741cb6d39068 -> n0x741cb6d38df8		// ASSIGN -> ssd
		n0x741cb6d39068 -> n0x741cb6d391a0		// ASSIGN -> hdd

}